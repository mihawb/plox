# operator precedence and associativity baked into grammar rules
# match at precedence level or higher (this is a common set of rules)

expression     → conditional ;
conditional    → equality ( "?" expression ":" conditional )? ;
equality       → comparison ( ( "!=" | "==" ) comparison )* ;
comparison     → term ( ( ">" | ">=" | "<" | "<=" ) term )* ;
term           → factor ( ( "-" | "+" ) factor )* ;
factor         → unary ( ( "/" | "*" ) unary )* ;  # recursive production on the left side makes it left associative (multiple factorizations read left-to-right)
               | unary ;
unary          → ( "!" | "-" ) unary
               | primary ;
primary        → NUMBER | STRING | "true" | "false" | "nil"
               | "(" expression ")"
               # error productions (1)
               | ( "!=" | "==" ) equality
               | ( ">" | ">=" | "<" | "<=" ) comparison
               | ( "+" ) term
               | ( "/" | "*" ) factor ;

# ()? -> grouping appears 0 or 1 times
# ()+ -> 1 or more ; ()* -> 0 or more

(1) if we get to primary and the expression starts with those symbols it means the user tried using them as unary expr
and we can point it out to them
followed by matching production to invalidate all the following matching exprs with left association